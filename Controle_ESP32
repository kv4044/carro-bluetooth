#include <BluetoothSerial.h>
#include <ESP32Servo.h>

// Bluetooth
BluetoothSerial SerialBT;

// Pinos do motor (mantendo originais - servo já funciona)
#define IN1 13  // Mantém pino original
#define IN2 18  // Mantém pino original

// Pino do servo (direção)
#define SERVO_PIN 19
Servo direcao;

// Pinos do buzzer e farol
#define HEADLIGHT_PIN 21 // Farol
#define LEFT_INDICATOR_PIN 22 // Seta esquerda
#define RIGHT_INDICATOR_PIN 23 // Seta direita
#define BRAKE_LIGHT_PIN 26 // Luz de freio
#define HORN_PIN 25 // Buzina

// PWM para buzzer (ADICIONADO)
#define PWM_CHANNEL 3
#define PWM_FREQ 1000
#define PWM_RESOLUTION 8

// Variáveis de controle
bool leftIndicatorOn = false;
bool rightIndicatorOn = false;
bool hazardOn = false;
unsigned long lastBlinkTime = 0;
bool blinkState = false;

int valSpeed = 255;

void setup() {
    Serial.begin(115200);
    SerialBT.begin("ESP32-CARRO"); // Nome visível no Bluetooth

    pinMode(IN1, OUTPUT);
    pinMode(IN2, OUTPUT);

    pinMode(HEADLIGHT_PIN, OUTPUT);
    pinMode(LEFT_INDICATOR_PIN, OUTPUT);
    pinMode(RIGHT_INDICATOR_PIN, OUTPUT);
    pinMode(HORN_PIN, OUTPUT);
    pinMode(BRAKE_LIGHT_PIN, OUTPUT);

    // Configuração PWM para buzzer (ADICIONADO)
    ledcSetup(PWM_CHANNEL, PWM_FREQ, PWM_RESOLUTION);
    ledcAttachPin(HORN_PIN, PWM_CHANNEL);

    digitalWrite(HEADLIGHT_PIN, LOW);
    digitalWrite(LEFT_INDICATOR_PIN, LOW);
    digitalWrite(RIGHT_INDICATOR_PIN, LOW);
    digitalWrite(HORN_PIN, LOW);
    digitalWrite(BRAKE_LIGHT_PIN, HIGH);

    direcao.setPeriodHertz(50);
    direcao.attach(SERVO_PIN, 500, 2400);

    direcao.write(90); // posição central
    Serial.println("Bluetooth pronto!");
}

void loop() {
    // IMPORTANTE: Chama função de pisca-pisca
    blinkIndicators();

    if (SerialBT.available()) {
        char comando = SerialBT.read();
        Serial.println(comando);

        switch (comando) {
        case 'F': // Frente
            frente();
            break;

        case 'B': // Ré
            re();
            break;

        case 'S': // Parar
            stopMotor();
            break;

        case 'L': // Virar esquerda
            virarEsquerda();
            break;

        case 'R': // Virar direita
            virarDireita();
            break;

        case 'G': // Frente esquerda
            Frente_esquerda();
            break;

        case 'H': // Frente direita
            Frente_direita();
            break;

        case 'I': // Traz esquerda
            Traz_esquerda();
            break;

        case 'J': // Traz direita
            Traz_direita();
            break;

        case 'Y': // Buzina
            buzinar();
            break;

        case 'X': // Alerta ON
            hazardOn = true;
            leftIndicatorOn = false;
            rightIndicatorOn = false;
            break;

        case 'x': // Alerta OFF
            hazardOn = false;
            digitalWrite(LEFT_INDICATOR_PIN, LOW);
            digitalWrite(RIGHT_INDICATOR_PIN, LOW);
            break;

        case 'W': // Seta esquerda ON
            leftIndicatorOn = true;
            hazardOn = false;
            break;

        case 'w': // Seta esquerda OFF
            leftIndicatorOn = false;
            digitalWrite(LEFT_INDICATOR_PIN, LOW);
            break;

        case 'U': // Farol ON
            digitalWrite(HEADLIGHT_PIN, HIGH);
            break;

        case 'u': // Farol OFF
            digitalWrite(HEADLIGHT_PIN, LOW);
            break;

        case 'V': // Seta direita ON
            rightIndicatorOn = true;
            hazardOn = false;
            break;

        case 'v': // Seta direita OFF
            rightIndicatorOn = false;
            digitalWrite(RIGHT_INDICATOR_PIN, LOW);
            break;

        case '1':
            valSpeed = 65;
            break;

        case '2':
            valSpeed = 130;
            break;

        case '3':
            valSpeed = 195;
            break;

        case '4':
            valSpeed = 255;
            break;
        }
    }
}

// --- Funções ---

void frente() {
    analogWrite(IN1, valSpeed);
    analogWrite(IN2, 0);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void re() {
    analogWrite(IN1, 0);
    analogWrite(IN2, valSpeed);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void Frente_esquerda(){
    analogWrite(IN1, valSpeed);
    analogWrite(IN2, 0);
    direcao.write(70);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void Frente_direita(){
    analogWrite(IN1, valSpeed);
    analogWrite(IN2, 0);
    direcao.write(110);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void Traz_esquerda(){
    analogWrite(IN1, 0);
    analogWrite(IN2, valSpeed);
    direcao.write(70);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void Traz_direita(){
    analogWrite(IN1, 0);
    analogWrite(IN2, valSpeed);
    direcao.write(110);
    digitalWrite(BRAKE_LIGHT_PIN, LOW);
}

void stopMotor() {
    delay(100);
    analogWrite(IN1, 0);
    analogWrite(IN2, 0);
    direcao.write(90); // Mudou de 82.7 para 90 (mais padrão)
    digitalWrite(BRAKE_LIGHT_PIN, HIGH);
}

void virarEsquerda() {
    direcao.write(70); // vira à esquerda
}

void virarDireita() {
    direcao.write(110); // vira à direita
}

// FUNÇÃO CORRIGIDA
void buzinar() {
    ledcWriteTone(PWM_CHANNEL, 800);  // Liga buzzer
    delay(200);                       // 200ms ligado
    ledcWriteTone(PWM_CHANNEL, 0);    // ADICIONADO ponto e vírgula
}

void blinkIndicators() {
  if (millis() - lastBlinkTime >= 500) {
    lastBlinkTime = millis();
    blinkState = !blinkState;

    if (hazardOn) {
      digitalWrite(LEFT_INDICATOR_PIN, blinkState);
      digitalWrite(RIGHT_INDICATOR_PIN, blinkState);
    } else {
      digitalWrite(LEFT_INDICATOR_PIN, leftIndicatorOn ? blinkState : LOW);
      digitalWrite(RIGHT_INDICATOR_PIN, rightIndicatorOn ? blinkState : LOW);
    }
  }
}