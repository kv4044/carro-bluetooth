#include <BluetoothSerial.h>
#include <ESP32Servo.h>
#include "driver/ledc.h"
#include <Arduino.h>

BluetoothSerial SerialBT;

#define IN1 5  // Motor
#define IN2 18 // Motor
#define SERVO_PIN 19 // Servo


#define HEADLIGHT_PIN 21 // Farol
#define LEFT_INDICATOR_PIN 22 // Seta esquerda
#define RIGHT_INDICATOR_PIN 23 // Seta direita
#define BRAKE_LIGHT_PIN 26 // Luz de freio
#define HORN_PIN 25 // Buzina

Servo steeringServo;

const int pwmChannel1 = 0;
const int pwmChannel2 = 1;
const int pwmFreq = 5000;
const int pwmResolution = 8;

// VariÃ¡veis de controle
bool leftIndicatorOn = false;
bool rightIndicatorOn = false;
bool hazardOn = false;
unsigned long lastBlinkTime = 0;
bool blinkState = false;

// Controle do motor
unsigned long lastMotorCommandTime = 0;

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32_Carro");

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(HEADLIGHT_PIN, OUTPUT);
  pinMode(LEFT_INDICATOR_PIN, OUTPUT);
  pinMode(RIGHT_INDICATOR_PIN, OUTPUT);
  pinMode(HORN_PIN, OUTPUT);
  pinMode(BRAKE_LIGHT_PIN, OUTPUT);

  digitalWrite(HEADLIGHT_PIN, LOW);
  digitalWrite(LEFT_INDICATOR_PIN, LOW);
  digitalWrite(RIGHT_INDICATOR_PIN, LOW);
  digitalWrite(HORN_PIN, LOW);
  digitalWrite(BRAKE_LIGHT_PIN, HIGH);

  steeringServo.attach(SERVO_PIN, 1000, 2000);
  steeringServo.write(90); // Centro

  ledcSetup(pwmChannel1, pwmFreq, pwmResolution);
  ledcSetup(pwmChannel2, pwmFreq, pwmResolution);
  ledcAttachPin(IN1, pwmChannel1);
  ledcAttachPin(IN2, pwmChannel2);

  ledcWrite(pwmChannel1, 0);
  ledcWrite(pwmChannel2, 0);
}

void loop() {
  if (SerialBT.available()) {
    String input = SerialBT.readStringUntil('\n');
    input.trim();
    Serial.println("Recebido: " + input);

    if (input.length() == 6) {
      char moveDir = input[0];
      int moveSpeed = input.substring(1, 3).toInt();
      char steerDir = input[3];
      int steerAngle = input.substring(4, 6).toInt();
      processMotion(moveDir, moveSpeed, steerDir, steerAngle);
    } else if (input.length() == 1) {
      processFunction(input[0]);
    }
  }

  // Verifica se parou de receber comandos do motor
  if (millis() - lastMotorCommandTime > 500) {
    stopMotor();
  }

  blinkIndicators();
}

void processMotion(char moveDir, int moveSpeed, char steerDir, int steerAngle) {


  if (steerDir == 'R' || steerDir == 'L') {
    int servoPosition = (steerDir == 'R') ? (90 - steerAngle) : (90 + steerAngle);
    steeringServo.write(servoPosition);
  }


  // Movimento do motor
  if (moveDir == 'F' || moveDir == 'B') {
    lastMotorCommandTime = millis();

    int pwmValue = map(moveSpeed, 0, 99, 0, 255);

    if (moveSpeed == 0) {
      stopMotor();
    } else {
      digitalWrite(BRAKE_LIGHT_PIN, LOW);

      if (moveDir == 'F') {
        ledcWrite(pwmChannel1, pwmValue);
        ledcWrite(pwmChannel2, 0);
      } else {
        ledcWrite(pwmChannel1, 0);
        ledcWrite(pwmChannel2, pwmValue);
      }
    }
  }
}

void stopMotor() {
  ledcWrite(pwmChannel1, 0);
  ledcWrite(pwmChannel2, 0);
  digitalWrite(BRAKE_LIGHT_PIN, HIGH);
}

void processFunction(char cmd) {
  switch (cmd) {
    case 'U': digitalWrite(HEADLIGHT_PIN, HIGH); break;

    case 'u': digitalWrite(HEADLIGHT_PIN, LOW); break;

    case 'W': leftIndicatorOn = true; hazardOn = false; break;

    case 'w': leftIndicatorOn = false; digitalWrite(LEFT_INDICATOR_PIN, LOW); break;

    case 'V': rightIndicatorOn = true; hazardOn = false; break;

    case 'v': rightIndicatorOn = false; digitalWrite(RIGHT_INDICATOR_PIN, LOW); break;

    case 'X': hazardOn = true; leftIndicatorOn = false; rightIndicatorOn = false; break;

    case 'x': hazardOn = false; digitalWrite(LEFT_INDICATOR_PIN, LOW); digitalWrite(RIGHT_INDICATOR_PIN, LOW); break;

    case 'Y': digitalWrite(HORN_PIN, HIGH); delay(200); digitalWrite(HORN_PIN, LOW); break;
  }
}

void blinkIndicators() {
  if (millis() - lastBlinkTime >= 500) {
    lastBlinkTime = millis();
    blinkState = !blinkState;

    if (hazardOn) {
      digitalWrite(LEFT_INDICATOR_PIN, blinkState);
      digitalWrite(RIGHT_INDICATOR_PIN, blinkState);
    } else {
      digitalWrite(LEFT_INDICATOR_PIN, leftIndicatorOn ? blinkState : LOW);
      digitalWrite(RIGHT_INDICATOR_PIN, rightIndicatorOn ? blinkState : LOW);
    }
  }
}
