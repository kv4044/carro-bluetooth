#include <SoftwareSerial.h>
#include <Servo.h>

SoftwareSerial SerialBT(10, 11);  // RX, TX
Servo servoA;

#define LIMITE 20

const int ledEsquerda = 4;  // LED da seta esquerda
const int ledDireita = 6;   // LED da seta direita

bool piscandoEsquerda = false;
bool piscandoDireita = false;

unsigned long ultimaPiscadaEsq = 0;
unsigned long ultimaPiscadaDir = 0;
const int intervaloPisc = 500;  // 500ms

int PIN_SERVO_A = 9;
int PIN_RPWM = 3;
int PIN_LPWM = 5;
int PIN_FREIO = 7;
int PIN_FAROL = 12;
int PIN_ECHO = A0;
int PIN_TRIG = A1;

String numericPart = "";
char codeReceived;

void setup() {
  Serial.begin(115200);
  SerialBT.begin(9600);

  pinMode(PIN_RPWM, OUTPUT);
  pinMode(PIN_LPWM, OUTPUT);
  pinMode(PIN_FAROL, OUTPUT);
  pinMode(ledEsquerda, OUTPUT);
  pinMode(ledDireita, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);
  pinMode(PIN_ECHO, INPUT);
  pinMode(PIN_FREIO, OUTPUT);

  servoA.attach(PIN_SERVO_A);
}

void loop() {
  // Comunicação Bluetooth
  if (Serial.available()) {
    SerialBT.write(Serial.read());
  }

  while (SerialBT.available() > 0) {
    String line = SerialBT.readStringUntil('\n');
    Serial.println("code received: " + line);
    numericPart = "";
    for (int i = 0; i < line.length(); i++) {
      int character = line[i];
      if (isDigit(character)) {
        numericPart += (char)character;
      } else if (character != '\n') {
        codeReceived = character;
      } else {
        break;
      }
    }
  }

  // Processa comandos recebidos
  switch (codeReceived) {
    case 'X':  // Alterna seta esquerda
      piscandoEsquerda = !piscandoEsquerda;
      piscandoDireita = false;  // Desliga seta direita se estiver ativada
      if (!piscandoEsquerda) digitalWrite(ledEsquerda, LOW);
      break;

    case 'Y':  // Alterna seta direita
      piscandoDireita = !piscandoDireita;
      piscandoEsquerda = false;  // Desliga seta esquerda se estiver ativada
      if (!piscandoDireita) digitalWrite(ledDireita, LOW);
      break;

    case 'F': irparaFrente(200); break;
    case 'Q': esquerdaFrente(200); break;
    case 'L': virarEsquerda(); break;
    case 'B': voltarAtraz(200); break;
    case 'Z': esquerdaAtraz(200); break;
    case 'C': direitaAtraz(200); break;
    case 'R': virarDireta(); break;
    case 'E': direitaFrente(200); break;
    case 'S': parar(); break;
    case 'M': ligarFarol(); break;
    case 'm': desligarFarol(); break;
    case 'J':
      if (numericPart != "") {
        rotateServoA(numericPart.toInt());
      }
      break;
  }

  // Controle de piscagem da seta esquerda
  if (piscandoEsquerda) {
    if (millis() - ultimaPiscadaEsq >= intervaloPisc) {
      ultimaPiscadaEsq = millis();
      digitalWrite(ledEsquerda, !digitalRead(ledEsquerda));  // Alterna estado
    }
  }

  // Controle de piscagem da seta direita
  if (piscandoDireita) {
    if (millis() - ultimaPiscadaDir >= intervaloPisc) {
      ultimaPiscadaDir = millis();
      digitalWrite(ledDireita, !digitalRead(ledDireita));  // Alterna estado
    }
  }
}

// Funções auxiliares
void ligarFarol() {
  digitalWrite(PIN_FAROL, HIGH);
}

void desligarFarol() {
  digitalWrite(PIN_FAROL, LOW);
}

void rotateServoA(int grados) {
  servoA.write(grados);
}

void irparaFrente(int velocidade) {
  rotateServoA(60);
  analogWrite(PIN_RPWM, velocidade);
  analogWrite(PIN_LPWM, 0);
  digitalWrite(PIN_FREIO, LOW);
}

void voltarAtraz(int velocidade) {
  rotateServoA(60);
  analogWrite(PIN_RPWM, 0);
  analogWrite(PIN_LPWM, velocidade);
  digitalWrite(PIN_FREIO, LOW);
}

void parar() {
  rotateServoA(60);
  analogWrite(PIN_RPWM, 0);
  analogWrite(PIN_LPWM, 0);
  digitalWrite(PIN_FREIO, HIGH);
}

void esquerdaFrente(int velocidade) {
  rotateServoA(80);
  analogWrite(PIN_RPWM, velocidade);
  analogWrite(PIN_LPWM, 0);
  digitalWrite(PIN_FREIO, LOW);
}

void direitaFrente(int velocidade) {
  rotateServoA(20);
  analogWrite(PIN_RPWM, velocidade);
  analogWrite(PIN_LPWM, 0);
  digitalWrite(PIN_FREIO, LOW);
}

void esquerdaAtraz(int velocidade) {
  rotateServoA(80);
  analogWrite(PIN_RPWM, 0);
  analogWrite(PIN_LPWM, velocidade);
  digitalWrite(PIN_FREIO, LOW);
}

void direitaAtraz(int velocidade) {
  rotateServoA(20);
  analogWrite(PIN_RPWM, 0);
  analogWrite(PIN_LPWM, velocidade);
  digitalWrite(PIN_FREIO, LOW);
}

void virarEsquerda() {
  rotateServoA(80);
}

void virarDireta() {
  rotateServoA(20);
}

void virarFrente() {
  rotateServoA(60);
}
